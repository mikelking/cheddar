#!/usr/bin/env bash

CMD="rsync --stats -avzrp"
OWD=`pwd`
DESTBASE=wproot/wordpress/wp-content/

# Deploy to environment: 'production' or 'staging'
TARGET=$1

####
# Setup deployment destination
# TODO: change this to local by default and add a true help option
if [ -z "$1" ]; then
	#echo "Usage: $0 [production|staging|local]"
	#exit 1
	TARGET=local
fi

# Do a local deploy if SETUP_DBDUMP or SETUP_DBDUMP
if [ ! -z "$SETUP_DBDUMP" -o ! -z "$SETUP_DBDUMP_PATH" ]; then
	TARGET=local
fi

####
# Because even in BASH we should build reusable entities
#
#
function linkAssets() {
    ENTITY=${1}
    DEST=${DESTBASE}${ENTITY}/
    pushd ${DEST}

    if [ -e ${OWD}/${ENTITY} ]
    then
        echo "${ENTITY} exists, searching for mu-plugin assets"
        for ASSET in ${OWD}/${ENTITY}/*
        do
            echo ${ASSET##*/}
            if [ ! -e ${ASSET##*/} ]
            then
                echo "Missing ${ENTITY} assets found attempting to symlink them."
                #echo ${ASSET}
                #echo -n "Current working directory is "
                #pwd
                ln -s ${ASSET}
                #popd
            fi
        done
    fi
    popd
}


####
# This calls linkAssets against the appropriate destination target which sets up
# the appropriate symlinks so that the vargant will work. This allows us to work
# on the code in the shared resource and test in the live developer vagrant.
#
function localBuild() {
    ####
    # Check for items in mu-plugins and symlink the ones that don't
    # already exist into the destination
    linkAssets 'mu-plugins'
    linkAssets 'plugins'
    linkAssets 'themes'
}

function preDeployBuild() {
####
# This section needs work but as a first pass it will suffice
# TODO: change the following to symlink on local builds and cp for all deployment builds
# This change will require new functions that search the source path(s) and symlink the
# top level items into the destinations the symlink operation(s) should be indempotent
# thus we may need to check the existence of the target in the destination directory.
#
# The plan is to pass in a deployment destination target on the command line and build
# a hard copy read for shipping to that end point.

# Check for local mu-plugins
if [ -e mu-plugins ]
then
    ${CMD} mu-plugins/ wproot/wordpress/wp-content/mu-plugins/
fi

# Check for local plugins
if [ -e plugins ]
then
    ${CMD} plugins/ wproot/wordpress/wp-content/plugins/
fi

# Check for local themes
if [ -e themes ]
then
${CMD} themes/ wproot/wordpress/wp-content/themes/
fi
}

####
# TODO: change targets to work/TARGET/wproot/...
#
case "$TARGET" in
	local)
		localBuild
		exit 0
		;;
	production)
		url=git@git.wpengine.com:production/rdigest.git
		;;
	preprod)
		url=git@git.wpengine.com:staging/rdigest.git
		;;
	staging)
		url=git@git.wpengine.com:production/readersdigest.git
		;;
	*)
		echo "Invalid environment: '$env'. Must be 'production', 'preprod', 'staging' or 'local'"
		exit 1
		;;
esac

####
# Install/update as necessary any package changes
#
composer update

####
# Install the config files as necessary
# TODO: change this to symlinks on local builds and persist the copy for deployment builds
#
cp etc/*-conf.php wproot/

