#!/usr/bin/env bash

CMD="rsync --stats -avzrp"
OWD=`pwd`
SRC=${OWD}/src
DESTBASE=wproot/wordpress/wp-content
SILENT=/dev/null 2>&1

# Deploy to environment: 'production' or 'staging'
TARGET=$1

####
# Setup deployment destination
# TODO: change this to local by default and add a true help option
if [ -z "$1" ]; then
	#echo "Usage: $0 [production|staging|local]"
	#exit 1
	TARGET=local
fi

# Do a local deploy if SETUP_DBDUMP or SETUP_DBDUMP
if [ ! -z "$SETUP_DBDUMP" -o ! -z "$SETUP_DBDUMP_PATH" ]; then
	TARGET=local
fi

function getRevision() {
    git rev-parse --short HEAD > wproot/revision
}

function getComposerManifest() {
    if [ ! -e composer.json ]
    then
        ln -s ../../composer.json
    fi
}

#####
# SymLink the dev system vendors into the destination; this reduces the need to reinstall each build.
#
function getVendors() {
    if [ ! -e vendor ]
    then
        ln -s ../../vendor
    fi
}

#####
# At the time of this development something has gone awry with
# the composer auto-installer. This is a suitable backup.
#
function installWordPressCore() {
    if [ -e vendor/johnpbloch/wordpress-core/ ]
    then
        if [ ! -e wproot/wordpress ]
        then
            mkdir -p wproot/wordpress
        fi
        ${CMD} vendor/johnpbloch/wordpress-core/ wproot/wordpress/
    fi
}

####
# Install/update as necessary any package changes FIRST
#
function preBuild() {
    composer update
}

####
# Install the config files as necessary
# TODO: change this to symlinks on local builds and persist the copy for deployment builds
#
function installConfigs() {
    cp ${OWD}/etc/*-conf.php wproot/
}

####
# Because even in BASH we should build reusable blocks
#
# This searches for source files in the appropriate entity
# spaces and SymLink them into the local dev build
#
function linkAssets() {
    ENTITY=${1} # mu-plugins, plugins, themes
    DEST=${DESTBASE}/${ENTITY}/
    pushd ${DEST} > ${SILENT}

    # Search the source for the entity
    if [ -e ${SRC}/${ENTITY} ]
    then
        #echo "The ${ENTITY} destination exists."
        for ASSET in ${SRC}/${ENTITY}/*
        do
            #echo "Searching for source matching assets in ${ENTITY}."
            # echo ${ASSET##*/}
            if [ ! -e ${ASSET##*/} ]
            then
                #echo "Missing ${ASSET##*/} asset, attempting to symlink from ${SRC}/${ENTITY}/${ASSET##*/}."
                #echo ${SRC}/${ENTITY}/${ASSET}
                #echo ${ASSET}
                #echo -n "Current working directory is "
                #pwd
                #ln -s ${SRC}/${ENTITY}/${ASSET}
                ln -s ${ASSET}
                #popd > ${SILENT}
            fi
        done
    fi
    popd > ${SILENT}
}


####
# This calls linkAssets against the appropriate destination target which sets up
# the appropriate symlinks so that the vargant will work. This allows us to work
# on the code in the shared resource and test in the live developer vagrant.
#
function localBuild() {
    ####
    # Check for items in mu-plugins and symlink the ones that don't
    # already exist into the destination
    installWordPressCore
    linkAssets 'mu-plugins'
    linkAssets 'plugins'
    linkAssets 'themes'
}

####
# Simple hack to make WordPress uploads work in the vagrant.
# This is for local dev ONLY!
#
function createUploads() {
    if [ ! -e ${DESTBASE}/uploads ]
    then
        mkdir ${DESTBASE}/uploads
        chmod -R 777 ${DESTBASE}/uploads
    fi
}

####
# This symlinks parts of the build composer manifest and vendor directory that would
# result in unnecessary duplication or even possible build discrepancies. Thus installing
# from vendor cache.
#
# There's just no viable reason to reinstall everything that should already
# be in the dev tree.
function preDeployBuild() {
    ENTITY=${1}
    DEST='work/'${ENTITY}/
    mkdir -p ${DEST}
    pushd ${DEST} > ${SILENT}

    getComposerManifest
    getVendors
    installWordPressCore

    ####
    # This will look st the manifest and vendor tree see symlinking above
    preBuild

    installConfigs

    getRevision

    popd > ${SILENT}

    # Check for local mu-plugins
    if [ -e ${SRC}/mu-plugins ]
    then
        ${CMD} ${SRC}/mu-plugins/ ${DEST}${DESTBASE}/mu-plugins/
    fi

    # Check for local plugins
    if [ -e ${SRC}/plugins ]
    then
        ${CMD} ${SRC}/plugins/ ${DEST}${DESTBASE}/plugins/
    fi

    # Check for local themes
    if [ -e ${SRC}/themes ]
    then
        ${CMD} ${SRC}/themes/ ${DEST}${DESTBASE}/themes/
    fi
}

####
# Update the mu-plugins, plugins and themes as necessary
# Some of this actually could be move into the deploy script
# TODO: change targets to work/TARGET/wproot/...
#
case "$TARGET" in
	local)
	    preBuild
	    installConfigs
        getRevision
		localBuild
		createUploads
		exit 0
		;;
	production)
		preDeployBuild production

		GITURL=git@git.wpengine.com:production/somesite.git
		;;
	preprod)
	    preDeployBuild preprod
		GITURL=git@git.wpengine.com:staging/somesite.git
		;;
	staging)
	    preDeployBuild staging
		GITURL=git@git.wpengine.com:production/somesite.git
		;;
	*)
		echo "Invalid environment: '$env'. Must be 'production', 'preprod', 'staging' or 'local'"
		exit 1
		;;
esac
