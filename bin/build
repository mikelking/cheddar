#!/usr/bin/env bash

CMD="rsync --stats -avzrp"
OWD=`pwd`
DESTBASE=wproot/wordpress/wp-content/

# Deploy to environment: 'production' or 'staging'
TARGET=$1

####
# Setup deployment destination
# TODO: change this to local by default and add a true help option
if [ -z "$1" ]; then
	#echo "Usage: $0 [production|staging|local]"
	#exit 1
	TARGET=local
fi

# Do a local deploy if SETUP_DBDUMP or SETUP_DBDUMP
if [ ! -z "$SETUP_DBDUMP" -o ! -z "$SETUP_DBDUMP_PATH" ]; then
	TARGET=local
fi

function getRevision() {
    git rev-parse --short HEAD > wproot/revision
}

function getComposerManifest() {
    if [ ! -e composer.json ]
    then
        ln -s ../../composer.json
    fi
}

function getVendors() {
    if [ ! -e vendor ]
    then
        ln -s ../../vendor
    fi
}

function installWordPressCore() {
    if [ -e vendor/johnpbloch/wordpress-core/ ]
    then
        if [ ! -e wproot/wordpress ]
        then
            mkdir -p wproot/wordpress
        fi
        ${CMD} vendor/johnpbloch/wordpress-core/ wproot/wordpress/
    fi
}

function preBuild() {
    ####
    # Install/update as necessary any package changes FIRST
    #
    composer update

    ####
    # Install the config files as necessary
    # TODO: change this to symlinks on local builds and persist the copy for deployment builds
    #
    cp ${OWD}/etc/*-conf.php wproot/

    getRevision
}

####
# Because even in BASH we should build reusable entities
#
#
function linkAssets() {
    ENTITY=${1}
    DEST=${DESTBASE}${ENTITY}/
    pushd ${DEST}

    if [ -e ${OWD}/${ENTITY} ]
    then
        echo "${ENTITY} exists, searching for mu-plugin assets"
        for ASSET in ${OWD}/${ENTITY}/*
        do
            echo ${ASSET##*/}
            if [ ! -e ${ASSET##*/} ]
            then
                echo "Missing ${ENTITY} assets found attempting to symlink them."
                #echo ${ASSET}
                #echo -n "Current working directory is "
                #pwd
                ln -s ${ASSET}
                #popd
            fi
        done
    fi
    popd
}


####
# This calls linkAssets against the appropriate destination target which sets up
# the appropriate symlinks so that the vargant will work. This allows us to work
# on the code in the shared resource and test in the live developer vagrant.
#
function localBuild() {
    ####
    # Check for items in mu-plugins and symlink the ones that don't
    # already exist into the destination
    installWordPressCore
    linkAssets 'mu-plugins'
    linkAssets 'plugins'
    linkAssets 'themes'

}

function preDeployBuild() {
    ENTITY=${1}
    DEST='work/'${ENTITY}/
    mkdir -p ${DEST}
    pushd ${DEST}

    ####
    # by symlinking the composer manifest and vendor direcory it saves us from having to
    # resinstall everything that shoudl already be in the dev tree.
    getComposerManifest
    getVendors
    installWordPressCore

    ####
    # This will look st the manifest and vendor tree see symlinking above
    preBuild
    popd

    ####
    # This section needs work but as a first pass it will suffice
    # TODO: change the following to symlink on local builds and cp for all deployment builds
    # This change will require new functions that search the source path(s) and symlink the
    # top level items into the destinations the symlink operation(s) should be indempotent
    # thus we may need to check the existence of the target in the destination directory.
    #
    # The plan is to pass in a deployment destination target on the command line and build
    # a hard copy read for shipping to that end point.

    # Check for local mu-plugins
    if [ -e mu-plugins ]
    then
        ${CMD} mu-plugins/ ${DEST}${DESTBASE}mu-plugins/
    fi

    # Check for local plugins
    if [ -e plugins ]
    then
        ${CMD} plugins/ ${DEST}${DESTBASE}plugins/
    fi

    # Check for local themes
    if [ -e themes ]
    then
        ${CMD} themes/ ${DEST}${DESTBASE}themes/
    fi
}

####
# Update the mu-plugins, plugins and themes as necessary
# Some of this actually could be move into the deploy script
# TODO: change targets to work/TARGET/wproot/...
#
case "$TARGET" in
	local)
	    preBuild
		localBuild
		exit 0
		;;
	production)
		preDeployBuild production

		url=git@git.wpengine.com:production/rdigest.git
		;;
	preprod)
	    preDeployBuild preprod
		url=git@git.wpengine.com:staging/rdigest.git
		;;
	staging)
	    preDeployBuild staging
		url=git@git.wpengine.com:production/readersdigest.git
		;;
	*)
		echo "Invalid environment: '$env'. Must be 'production', 'preprod', 'staging' or 'local'"
		exit 1
		;;
esac
